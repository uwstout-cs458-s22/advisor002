<script
  src="https://code.jquery.com/jquery-3.4.1.min.js"
  integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo="
  crossorigin="anonymous"
></script>
<script
  src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"
  integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q"
  crossorigin="anonymous"
></script>
<script
  src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"
  integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"
  crossorigin="anonymous"
></script>

<script>
  function idleLogout() {
    var t;
    window.onload = resetTimer;
    window.onmousemove = resetTimer;
    window.onmousedown = resetTimer; // catches touchscreen presses as well
    window.ontouchstart = resetTimer; // catches touchscreen swipes as well
    window.ontouchmove = resetTimer; // required by some devices
    window.onclick = resetTimer; // catches touchpad clicks as well
    window.onkeydown = resetTimer;
    window.addEventListener('scroll', resetTimer, true);
    function redirectToLogout() {
      window.location.href = '/logout';
    }
    function resetTimer() {
      clearTimeout(t);
      t = setTimeout(redirectToLogout, 10 * 60 * 1000); // 10 minutes of inactivity
    }
  }
  idleLogout();
</script>

<!-- Script for adding courses to program plan -->
<script>
  courseCount = 1;
  function addCourse(divName) {
    courseCount++;
    const newDiv = document.createElement('div');
    const newDivId = 'course-' + courseCount;
    newDiv.setAttribute('id', newDivId);
    newDiv.innerHTML = `<input type="text" class="form-control course-input" placeholder="Enter course"/>
      <a href="#" onclick="deleteElement('${newDivId}');">Delete</a>`;
    document.getElementById(divName).appendChild(newDiv);
  }
</script>

<!-- Script for adding sections to program plan -->
<script>
  sectionCount = 1;
  function addSection(divName) {
    sectionCount++;
    const newDiv = document.createElement('div');
    const sectionName = 'section-' + sectionCount;
    const groupName = 'group-' + sectionCount;
    newDiv.setAttribute('id', groupName);

    newDiv.innerHTML = `
    <hr />
      <label for="${sectionName}">Section Name | </label>
      <a href="#" onclick="deleteElement('${groupName}');">Delete</a>
      <input
        type="text"
        class="form-control"
        id="${sectionName}"
        placeholder="Enter section name"
      />
      <div id="${sectionName}-courses">
        <input
          type="text"
          class="form-control course-input"
          placeholder="Enter course"
        />
      </div>
      <input
        type="button"
        class="btn btn-secondary ml-4"
        value="Add course"
        onClick="addCourse('${sectionName}-courses');"
      />
    </div>`;
    document.getElementById(divName).appendChild(newDiv);
  }
</script>

<script>
  function deleteElement(elementId) {
    document.getElementById(elementId).remove();
  }
</script>

<script>
  function resetPlan() {
    if (window.confirm('Are you sure?')) {
      // Reloading will reset modal. Not ideal, but way easier than searching dom for elements and deleting them
      location.reload();
    }
  }
</script>

<!-- User table search bar -->
<script>
  $(document).ready(function () {
    $('#searchBar').on('keyup', function () {
      var value = $(this).val().toLowerCase();
      $('#userTable tr').filter(function () {
        $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
      });
    });
  });
</script>

<!-- Course table search bar -->
<script>
  $(document).ready(function () {
    $('#courseSearchBar').on('keyup', function () {
      var value = $(this).val().toLowerCase();
      $('#completedTable tr').filter(function () {
        $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
      });
      $('#currentTable tr').filter(function () {
        $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
      });
      $('#viewTable tr').filter(function () {
        $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
      });
    });
  });
</script>

<!--Courses scripts-->
<script>
  $(document).ready(function () {
    $('#completedTable').hide();
    $('#viewTable').hide();
    showCurrent = () => {
      $('#completedTable').hide();
      $('#currentTable').show();
      $('#viewTable').hide();
    };
    showCompleted = () => {
      $('#completedTable').show();
      $('#currentTable').hide();
      $('#viewTable').hide();
    };
    viewCourses = () => {
      $('#completedTable').hide();
      $('#currentTable').hide();
      $('#viewTable').show();
    };
  });
</script>

<!-- Major Compare Scripts -->
<script type="text/javascript">
  let studentMajor = '';
  const oldDiv = document.getElementById('major');
  const newDiv = document.getElementById('majorCompare');
  const newButton = document.createElement('input');
  function compareMajor(divName, courseInfo) {
    if (courseInfo != '') {
      oldDiv.setAttribute('class', 'card text-left col-sm justify-content-center');

      newButton.setAttribute('class', 'align-self-end btn btn-primary');
      newButton.setAttribute('value', 'Change Majors');
      newButton.setAttribute('id', 'fixedbutton');
      newButton.setAttribute('onClick', 'rebuildPage()');
      major = courseInfo;
      newDiv.setAttribute('class', 'card text-left col-sm justify-content-center');
      newDiv.innerHTML = `You are getting information for the ${courseInfo} major`;
      newDiv.appendChild(newButton);
    }
  }
  function update() {
    var select = document.getElementById('majors');
    var value = select.options[select.selectedIndex].text;
    compareMajor('majorCompare', value);
  }
  function rebuildPage() {
    oldDiv.innerHTML = `You are getting information for the ${major} major`;
    //oldDiv.removeAttribute('col-sm')
    oldDiv.class = 'align-items-center justify-content-center';
    newDiv.removeAttribute('class');
    newDiv.removeChild(newButton);
    newDiv.innerHTML = null;
    // document.removeChild(newDiv)
  }
</script>

<!-- Term Scripts -->
<script type="text/javascript">
  const currentTermDiv = document.getElementById('termSelection');
  const comparedTermDiv = document.getElementById('termCompare');
  const termButton = document.createElement('input');

  let termSelection = '';

  // TODO: Find a way to switch which term is deleted.
  //       The user should have the option to delete either term comparison options.
  function termComparison(termDiv, termInformation) {
    if (termInformation != '') {
      currentTermDiv.setAttribute('class', 'card text-left col-sm justify-content-center');

      newButton.setAttribute('class', 'align-self-end btn btn-primary');
      newButton.setAttribute('value', 'Remove This Term');
      newButton.setAttribute('id', 'fixedbutton');
      newButton.setAttribute('onClick', 'newTermLayout()');
      term = termInformation;
      comparedTermDiv.setAttribute('class', 'card text-left col-sm justify-content-center');
      comparedTermDiv.innerHTML = `You are currently looking at term ${termInformation}`;
      comparedTermDiv.appendChild(newButton);
    }
  }

  function newTermLayout() {
    currentTermDiv.innerHTML = `You are currently looking at term ${termInformation}`;
    currentTermDiv.class = 'align-items-center justify-content-center';
    comparedTermDiv.removeAttribute('class');
    comparedTermDiv.removeChild(newButton);
    comparedTermDiv.innerHTML = null;
  }

  function updateTerm() {
    var select = document.getElementById('term');
    var value = select.options[select.selectedIndex].text;
    termComparison('comparedTermDiv', value);
  }
</script>

<!-- Course Form Validation -->
<script>
  function validateCourseForm(form) {
    elements = form.elements;

    let isValid = true;
    for (const element of elements) {
      if (!element.classList.contains('validate')) continue;

      if (element.id === 'course-number' && !element.value.includes('-')) {
        element.setCustomValidity('Must include prefix. Ex: CS-123');
        isValid = false;
        continue;
      }

      if (element.validity.valueMissing) {
        element.setCustomValidity('Cannot be empty');
        isValid = false;
        continue;
      }

      // Checks if credits is not a number
      if (element.id === 'course-credits' && isNaN(element.value)) {
        element.setCustomValidity('Must be a number');
        isValid = false;
        continue;
      }
      // Empty string means no errors
      element.setCustomValidity('');
    }
    form.reportValidity();

    return isValid;
  }
</script>

<!-- Add more perquisite input -->
<script>
  function addPrerequisiteInput() {
    const newSection = document.createElement('div');
    newSection.setAttribute('class', 'form-row');

    newSection.innerHTML = `
        <div class="form-group col-md-4">
          <input type="text" class="form-control course-prereq" placeholder="Course Prefix and Number">
        </div>
        <div class="form-group col-md-4">
          <input type="text" class="form-control course-prereq" placeholder="Course Prefix and Number">
        </div>
        <div class="form-group col-md-4">
        <input type="text" class="form-control course-prereq" placeholder="Course Prefix and Number">
        </div>
      </div>`;
    document.getElementById('prerequisite-section').appendChild(newSection);
  }
</script>

<script>
  async function submitCourseForm(form) {
    // Hides messages from previous course submissions, so that the new one will be displayed
    const errorAlert = document.getElementById('failed-course-alert');
    const successAlert = document.getElementById('success-course-alert');
    errorAlert.style.display = 'none';
    successAlert.style.display = 'none';

    const isValid = validateCourseForm(form);

    if (!isValid) return;

    const formData = {
      name: null,
      credits: null,
      section: null,
      description: null,
      prerequisites: [],
    };
    elements = form.elements;

    // Turn the form data into an JS object
    for (const element of elements) {
      // Skips blank values
      if (element.value === '') continue;

      if (element.id === 'course-number') {
        formData.section = element.value;
        continue;
      }

      if (element.id === 'course-name') {
        formData.name = element.value;
        continue;
      }

      if (element.id === 'course-credits') {
        formData.credits = element.value;
        continue;
      }

      if (element.id === 'course-description') {
        formData.description = element.value;
        continue;
      }

      if (element.classList.contains('course-prereq')) {
        formData.prerequisite.push(element.value);
        continue;
      }
    }

    try {
      const res = await fetch('/courses/createCourse', {
        method: 'POST',
        credentials: 'same-origin',
        body: JSON.stringify(formData),
        headers: {
          'Content-Type': 'application/json',
        },
      });
      if (res.status === 201) {
        successAlert.style.display = 'block';
      } else {
        errorAlert.style.display = 'block';
      }
    } catch (e) {
      errorAlert.style.display = 'block';
    }
  }
}
</script>

<!-- Edit course -->
<script>
  async function submitCourseEditForm(form) {
    const courseId = $(form).data('id');
    // Hides messages from previous course submissions, so that the new one will be displayed
    const errorAlert = document.getElementById(`failed-edit-alert-${courseId}`);
    const successAlert = document.getElementById(`success-edit-alert-${courseId}`);
    errorAlert.style.display = 'none';
    successAlert.style.display = 'none';

    const isValid = validateCourseForm(form);

    if (!isValid) return;

    const formData = {
      name: null,
      credits: null,
      section: null,
    };
    elements = form.elements;

    // Turn the form data into an JS object
    for (const element of elements) {
      // Skips blank values
      if (element.value === '') continue;

      if (element.id === 'course-number') {
        formData.section = element.value;
        continue;
      }

      if (element.id === 'course-name') {
        formData.name = element.value;
        continue;
      }

      if (element.id === 'course-credits') {
        formData.credits = element.value;
        continue;
      }
    }

    try {
      const editResponse = await fetch(`/courses/editCourse/${courseId}`, {
        method: 'POST',
        credentials: 'same-origin',
        body: JSON.stringify(formData),
        headers: {
          'Content-Type': 'application/json',
        },
      });
      if (editResponse.status === 200) {
        successAlert.style.display = 'block';
      } else {
        errorAlert.style.display = 'block';
      }
    } catch (e) {
      errorAlert.style.display = 'block';
    }
  }
</script>

<!-- Script with working on the terms page -->
<script>
  function showModal(termNumber) {
    const userName = document.getElementById(`userTerm${termNumber}`).innerText;
    const title = document.getElementById('modalTitle');
    title.innerHTML = `Are you sure you want to remove Term '${userName}'`;
    $('#termsModal').modal('show');
  }
  function removeTerm(termNumber) {
    const term = `Term${termNumber}`;
    const termToBeRemoved = document.getElementById(term);
    termToBeRemoved.remove();
    $('#termsModal').hide();
  }
  function hideModal() {
    $('#termsModal').hide();
  }
</script>